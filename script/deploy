#!/usr/bin/env ruby

# Load libraries
require "rubygems"
require "yaml"
require "AWS"

# Test validitiy of arguments
if ARGV.length < 2
  puts "ruby script/deploy <type> <environment>"
  exit
elsif !['install','release'].include? ARGV[0]
  puts "deployment types are - install,release"
  exit
elsif !['staging','production'].include? ARGV[1]
  puts "deployment environments are - staging,production"
  exit
end

# Move command line arguments into named variables
task        = ARGV[0]
environment = ARGV[1]

# Load rails config
config = YAML.load_file("config/config.yml")[environment]

# Create object for interfacing with AWS EC2 api
ec2 = AWS::EC2::Base.new(
        :access_key_id      => config[:aws_access_id],
        :secret_access_key  => config[:aws_secret_key])

# Create object for interfacing with AWS ELB api
elb = AWS::ELB::Base.new(
        :access_key_id      => config[:aws_access_id],
        :secret_access_key  => config[:aws_secret_key])


install_requirement = task == "install" ? "0" : "1"

instances = ec2.describe_instances.reservationSet.item.map do |group| 
              group.instancesSet.item
            end.flatten

instances = instances.select do |instance|
                tags = instance.tagSet.item
                next unless tags.length > 0

                install_tag = tags.select{|t| t.key == "Installed"}
                next unless install_tag.length > 0

                install_status = install_tag.first.value
                next unless install_status == install_requirement
                
                true
            end

web_server_regex = Regexp.new("Closet #{environment.capitalize} Web Server")
web_servers = instances.select do |instance| 
                tags = instance.tagSet.item
                next unless tags.length > 0

                name_tag = tags.select{|t| t.key == "Name"}
                next unless name_tag.length > 0

                name = name_tag.first.value
                next unless name.scan(web_server_regex).length > 0

                true
              end

proc_server_regex = Regexp.new("Closet #{environment.capitalize} "\
                                "Processing Server")
proc_servers = instances.select do |instance| 
                tags = instance.tagSet.item
                next unless tags.length > 0

                name_tag = tags.select{|t| t.key == "Name"}
                next unless name_tag.length > 0

                name = name_tag.first.value
                next unless name.scan(proc_server_regex).length > 0

                true
              end

ENV['web_servers']  = web_servers.map(&:dnsName).join(",")
ENV['proc_servers'] = proc_servers.map(&:dnsName).join(",")


system("cap #{environment} deploy:#{task}")


# Extra operations for freshly installed instanves
#
if install_requirement == '0' && instances.length > 0

  # Update tags to mark them as installed
  resource_ids = instances.map(&:instanceId)  
  ec2.create_tags(
    :resource_id  => resource_ids,
    :tag          => [{'Installed' => '1'}])

  # Add new web servers to their environment's load balancer
  if web_servers.length > 0
    balancers = elb.describe_load_balancers.DescribeLoadBalancersResult.
                  LoadBalancerDescriptions.member
    balancer  = balancers.select{|b| b.LoadBalancerName.
                            scan(environment).length > 0}.first

    if balancer
      elb.register_instances_with_load_balancer(
        :instances          => web_servers.map(&:instanceId),
        :load_balancer_name => balancer.LoadBalancerName)
    end

  end # if web servers
end # if freshly installed

